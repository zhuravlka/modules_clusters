{
    "contents" : "library(\"rtracklayer\")\nlibrary(\"GenometriCorr\")\n\nlibrary('doParallel')\n#cl <- makeCluster(1)\nregisterDoParallel(cores=19)\n\n###\n#___how_to_start:\n#R CMD BATCH --no-save --no-restore '--args RData_file_name_with_result_matrix_with_corr_stat name_of_wich_cluster_tracks_to_conside name_of_matrix_to_wich_correl_res_write' count_Corr_27.08.R\n###\n\nload.all.data<-function(input.file){\n  \n  con <- file(input.file, 'r') \n  modules_names <- readLines(con)\n  close(con)\n  \n  modules.tracks<- c()\n  cluster.active.tracks<- c()\n  cluster.all.tracks<- c()\n  cluster.brain.tracks<- c()\n  \n  \n  \n  for (i in 1:length(modules_names)){\n    module_name <- as.character(modules_names[i])\n    #data <- import(name)\n    current_module.track <- as(import(paste(module_name,\".bed\",sep = \"\")), \"RangedData\")\n    \n    current_cluster.active.track <- as(import(paste(\"C\",module_name,\".clust.ge_2.active.bed\",sep = \"\")) , \"RangedData\")   \n    current_cluster.all.track <- as(import(paste(\"C\",module_name,\".clust.ge_2.all.bed\",sep = \"\")), \"RangedData\")\n    current_cluster.brain.track <- as(import(paste(\"C\",module_name,\".clust.ge_2.brain.bed\",sep = \"\")) , \"RangedData\")\n    \n    modules.tracks<- c(modules.tracks, current_module.track)\n    cluster.active.tracks<- c(cluster.active.tracks, current_cluster.active.track)\n    cluster.all.tracks<- c(cluster.all.tracks, current_cluster.all.track)\n    cluster.brain.tracks<-c(cluster.brain.tracks, current_cluster.brain.track)\n  } \n  \n  names(modules.tracks)<-modules_names\n  names(cluster.active.tracks)<-paste(modules_names,\".cluster.active\",sep = \"\")\n  names(cluster.all.tracks)<-paste(modules_names,\".cluster.all\",sep = \"\")\n  names(cluster.brain.tracks)<-paste(modules_names,\".cluster.brain\",sep = \"\")\n  \n  return(list(modules.tracks,cluster.active.tracks,cluster.all.tracks,cluster.brain.tracks))\n  \n}\n\n\"[<-.result\" <- function(x,...,value) {\n  args <- as.list(match.call())\n  args <- args[-c(1:2,length(args))]\n  length(value) <- length(args)\n  for(i in seq(along=args)) {\n    a <- args[[i]]\n    if(!missing(a)) eval.parent(substitute(a <- v,list(a=a,v=value[[i]])))\n  }\n  x\n}\n\ncountCorr<-function(tracks.query, tracks.reference,result_array){\n  #add essential information\n  human.chrom.length <- c(249250621, 243199373, 198022430, 191154276, 180915260, 171115067, 159138663, 146364022, 141213431, 135534747, 135006516, 133851895, 115169878, 107349540, 102531392, 90354753, 81195210, 78077248, 59128983, 63025520, 48129895, 51304566, 59373566,155270560)\n  names(human.chrom.length) <- c(\"chr1\", \"chr2\", \"chr3\", \"chr4\", \"chr5\", \"chr6\", \"chr7\", \"chr8\", \"chr9\", \"chr10\", \"chr11\", \"chr12\", \"chr13\", \"chr14\", \"chr15\", \"chr16\", \"chr17\", \"chr18\", \"chr19\", \"chr20\", \"chr21\", \"chr22\", \"chrY\", \"chrX\")\n  pn.area <- 100\n  pn.dist <- 100\n  pn.jacc <- 100\n  \n  \n  for (name.query in names(tracks.query)){\n    data.query<- tracks.query[name.query]\n    #count<- 0\n    #count_prev<-0\n    #if(count-count_prev>5){\n    # save(result_array, file = paste(result_array,'_v',count,sep = \"_\"))\n    # count_prev<- count\n    #}\n    \n    \n    x<-c()\n    x<-foreach (j=1:length(tracks.reference)) %dopar% {\n      #for (j in 1:length(tracks.reference)){\n      name.reference <- names(tracks.reference)[j]\n      data.reference <- tracks.reference[name.reference]\n      \n      \n      correlation_result  <- suppressWarnings(GenometriCorrelation(data.query[[1]],data.reference[[1]], chromosomes.length = human.chrom.length, chromosomes.to.proceed = c(\"chr1\", \"chr2\", \"chr3\",\"chr4\", \"chr5\",\"chr6\", \"chr7\",\"chr8\", \"chr9\",\"chr10\", \"chr11\", \"chr12\", \"chr13\",\"chr14\", \"chr15\",\"chr16\", \"chr17\",\"chr18\", \"chr19\",\"chr20\", \"chr21\",\"chr22\"), ecdf.area.permut.number = pn.area, mean.distance.permut.number = pn.dist,  jaccard.measure.permut.number = pn.jacc, keep.distributions = FALSE, showProgressBar = FALSE))\n      #correlation_result\n      #x<-c(x,list(correlation_result))\n      \n      #correlation_result  <- GenometriCorrelation(data.first[[1]],data.second[[1]], chromosomes.length = human.chrom.length, chromosomes.to.proceed = c(\"chr1\"), ecdf.area.permut.number = pn.area, mean.distance.permut.number = pn.dist,  jaccard.measure.permut.number = pn.jacc, keep.distributions = FALSE, showProgressBar = FALSE)\n      #correlation_result  <- GenometriCorrelation(data.first[[name.first]],data.second[[name.second]], chromosomes.length = human.chrom.length, chromosomes.to.proceed = c(\"chr1\"), ecdf.area.permut.number = pn.area, mean.distance.permut.number = pn.dist,  jaccard.measure.permut.number = pn.jacc, keep.distributions = TRUE, showProgressBar = FALSE)        \n    }\n    names(x)<-names(tracks.reference)\n    for (name in names(x)){\n      result_array[name.query,name]<-x[name]\n    }\n  }\n  return(list(result_array))\n  #return(array.mtt)\n  \n}\n\ncreate.result.array<-function(tracks_1, tracks_2){\n  result_array <-array(list(NULL), dim=c(length(tracks_1),length(tracks_2)), dimnames= list(names(tracks_1),names(tracks_2)))\n  return(result_array)\n}\n\nchange_modules_starts<-function(modules.tracks, upstream){\n  new.starts<-lapply(lapply(modules.tracks, start) ,   function(x) x-upstream) \n  for (module.name in names(modules.tracks)){\n    #print(module.name)\n    #print(names(modules.tracks[module.name]))\n    start(modules.tracks[module.name][[1]]) <-new.starts[module.name][[1]] \n  }\n  return(modules.tracks)\n}\n\nchange_modules_ends<-function(modules.tracks, downstream){\n  new.ends<-lapply(lapply(modules.tracks, end) ,   function(x) x+downstream) \n  for (module.name in names(modules.tracks)){\n    #print(module.name)\n    #print(names(modules.tracks[module.name]))\n    end(modules.tracks[module.name][[1]]) <-new.ends[module.name][[1]] \n  }\n  return(modules.tracks)\n}\n\nload.modules<-function(input.modules.list){\n  #input.modules.list<-'modules_list.txt'\n  con <- file(input.modules.list, 'r') \n  modules_names <- readLines(con)\n  close(con)\n  modules.tracks<- c()\n  \n  for (i in 1:length(modules_names)){\n    #i=1\n    #current_module.track <- as(import(paste(modules_names[i],\".bed\",sep = \"\")), \"RangedData\")\n    current_module.track <- as(import(paste(modules_names[i],\".bed\",sep=\"\")), \"RangedData\")\n    modules.tracks<- c(modules.tracks, current_module.track)\n  }  \n  names(modules.tracks)<-modules_names\n  return(modules.tracks)\n}\n\nmake.clusters.coords<-function(modules.tracks){\n  clusters.all<-c()\n  clusters.active<-c()\n  clusters.brain<-c()\n  for (module.name in names(modules.tracks)){   \n    #module.name<-names(modules.tracks)[1]\n    current.module<-modules.tracks[module.name]\n    starts<-lapply(current.module, start)[[1]]   \n    names_for<-space(current.module[[1]])\n    #starts<-c(10, 20, 30)\n    left_coords<-sapply(starts, function(x) sample(x:(x-30000), 1))\n    rigth_coords<-sapply(left_coords, function(x) sample(x:(x+5000), 1))\n    current_cluster_track_all<-RangedData(ranges = IRanges(start=left_coords, end=rigth_coords), space=names_for)\n    \n    left_coords<-sapply(starts, function(x) sample(x:(x-20000), 1))\n    rigth_coords<-sapply(left_coords, function(x) sample(x:(x+5000), 1))\n    current_cluster_track_active<-RangedData(ranges = IRanges(start=left_coords, end=rigth_coords), space=names_for)\n    \n    left_coords<-sapply(starts, function(x) sample(x:(x-10000), 1))\n    rigth_coords<-sapply(left_coords, function(x) sample(x:(x+5000), 1))\n    current_cluster_track_brain<-RangedData(ranges = IRanges(start=left_coords, end=rigth_coords), space=names_for)\n    \n    clusters.brain<-c(clusters.brain, current_cluster_track_brain)\n    clusters.active<-c(clusters.active, current_cluster_track_active)\n    clusters.all<-c(clusters.all, current_cluster_track_all)\n  }\n  \n  names(clusters.brain)<-names(modules.tracks)\n  names(clusters.active)<-names(modules.tracks)\n  names(clusters.all)<-names(modules.tracks)\n  \n  return(list(clusters.brain, clusters.active, clusters.all)) \n}\n\n#########____MAIN_for_simple_count_corr____#################\n\n#tracks <- structure(NA,class=\"result\")\n#tracks[modules.tracks,cluster.active.tracks,cluster.all.tracks,cluster.brain.tracks]<- load.all.data('modules_list.txt')\n\n#modules.tracks<- change_modules_starts(modules.tracks, 10000)\n#modules.tracks<- change_modules_ends(modules.tracks, 10000)\n\n#list <- structure(NA,class=\"result\")\n\n##create arrays for results\n#correlation_result.module_cluster_all<-create.result.array(modules.tracks, cluster.all.tracks)\n#correlation_result.module_cluster_active<-create.result.array(modules.tracks, cluster.active.tracks)\n#correlation_result.module_cluster_brain<-create.result.array(modules.tracks, cluster.brain.tracks)\n\n##count correlations and write results to RData files\n###list[correlation_result.module_cluster_all]<- countCorr(modules.tracks, cluster.all.tracks,correlation_result.module_cluster_all)\n###save(correlation_result.module_cluster_all, file = \"ttt_all_1.RData\")\n\n###list[correlation_result.module_cluster_active]<- countCorr(modules.tracks, cluster.active.tracks,correlation_result.module_cluster_active)\n###save(correlation_result.module_cluster_active, file = \"ttt_active_2.RData\")\n\n#list[correlation_result.module_cluster_brain]<- countCorr(modules.tracks, cluster.brain.tracks,correlation_result.module_cluster_brain)\n#save(correlation_result.module_cluster_brain, file = \"new_cl_1_3_10000_10000.RData\")\n\n##___MAIN_for_generation_clusters_coord_and_check_count____####\n\nargs <- commandArgs(trailingOnly = TRUE)\n#args<-list('modules_list.txt',test.RData','brain','best1'  '-u', '10000', '-d', '10000', '-g') \n#args<-c('modules_list.txt','test.RData','brain','best1', '-g', '-u', '10') \n#setwd(\"F:/work/modules_clusters_clear/modules_clusters/\")\n\ninitial_dir<-getwd()\ndata_dir<-paste(initial_dir,'/data','/out-',args[4], sep=\"\")\nresult_dir<-paste(initial_dir,'/result', sep=\"\")\nsetwd(data_dir)\nif ( \"-g\" %in% args){\n  #print('in')\n  modules.tracks<-load.modules(args[1])\n  modules.tracks<-load.modules('modules_list.txt')\n  tracks <- structure(NA,class=\"result\")\n  tracks[cluster.brain.tracks, cluster.active.tracks, cluster.all.tracks]<-make.clusters.coords(modules.tracks)\n  } else {\n  #print('not')\n  tracks <- structure(NA,class=\"result\")\n  tracks[modules.tracks,cluster.active.tracks,cluster.all.tracks,cluster.brain.tracks]<- load.all.data('modules_list.txt')\n}\n\nif (\"-u\" %in% args){\n  upstream_value_index<-match('-u', args)+1\n  modules.tracks<- change_modules_starts(modules.tracks,as.integer(args[upstream_value_index]))\n  \n}\nif (\"-d\" %in% args){\n  downstream_value_index<-match('-d', args)+1\n  modules.tracks<- change_modules_ends(modules.tracks, as.integer(args[downstream_value_index]))\n}\n\n#args[1]='modules_list.txt'\n\n#modules.tracks<- change_modules_starts(modules.tracks, 10000)\n#modules.tracks<- change_modules_ends(modules.tracks, 10000)\n\nlist <- structure(NA,class=\"result\")\n\ncorrelation_result.module_cluster_all<-create.result.array(modules.tracks, cluster.all.tracks)\ncorrelation_result.module_cluster_active<-create.result.array(modules.tracks, cluster.active.tracks)\ncorrelation_result.module_cluster_brain<-create.result.array(modules.tracks, cluster.brain.tracks)\n\n\n\n\n#args[3]='brain'\n#paste('cluster.',args[3],'.tracks', sep=\"\")\n#paste('correlation_result.module_cluster_',args[3], sep=\"\")\nlist[correlation_result.module_cluster_brain]<- countCorr(modules.tracks, get(paste('cluster.',args[3],'.tracks', sep=\"\")),get(paste('correlation_result.module_cluster_',args[3], sep=\"\")))\nsetwd(result_dir)\nsave(correlation_result.module_cluster_brain, file=args[2])\n",
    "created" : 1412083567099.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1895798183",
    "id" : "5DF13810",
    "lastKnownWriteTime" : 1412104005,
    "path" : "F:/work/modules_clusters_clear/modules_clusters/count_Corr_27.08.R",
    "project_path" : "count_Corr_27.08.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}